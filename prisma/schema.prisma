// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Auth / NextAuth (tes modèles existants, inchangés) ----------
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // webauthn optionnel

  // Liens multi-tenant
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tenant    Tenant[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  siteAdmin
  manager
  member
}

enum ResourceType {
  ROOM
  DESK
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Tenant {
  id        String  @id @default(cuid())
  slug      String  @unique // pour {tenant}.domain.tld
  name      String // nom commercial
  legalName String? // raison sociale
  phone     String?
  website   String?

  addressLine1 String
  addressLine2 String?
  city         String
  region       String?
  postalCode   String
  country      String
  timezone     String  @default("Europe/Paris")

  stripeAccountId  String? @unique
  stripeCustomerId String?

  createdByUserId String
  createdBy       User   @relation(fields: [createdByUserId], references: [id], onDelete: Restrict)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OpeningHour OpeningHour[]
  Membership  Membership[]

  @@index([slug])
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      Role
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId, role])
  @@index([userId])
}

model OpeningHour {
  id        String     @id @default(cuid())
  tenantId  String
  dayOfWeek DayOfWeek?
  // Pour une date specifique, comme un jour feries
  date      DateTime?

  startTime   String?
  endTime     String?
  capacity    Int?
  description String?
  isActive    Boolean @default(true)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, dayOfWeek, date])
  @@index([tenantId, dayOfWeek])
  @@index([tenantId, date])
}
